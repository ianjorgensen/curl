/**
*    Copyright (C) 2008 Ian JÃ¸rgensen, Mathias Buus Madsen.
*
*    This program is free software: you can redistribute it and/or  modify
*    it under the terms of the GNU Affero General Public License, version 3,
*    as published by the Free Software Foundation.
*
*    This program is distributed in the hope that it will be useful,
*    but WITHOUT ANY WARRANTY; without even the implied warranty of
*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*    GNU Affero General Public License for more details.
*
*    You should have received a copy of the GNU Affero General Public License
*    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

var crypto = require('crypto');
var common = require('common');
var fs = require('fs');

var esc = function() {
	var map = {'=':'-','+':'*','/':'_'};
	
	return function(str) {
		return str.replace(/[=+\/]/g, function(a) {
			return map[a];
		});		
	};
}();
var unesc = function() {
	var map = {'-':'=','*':'+','_':'/'};
	
	return function(str) {
		return str.replace(/[-*_]/g, function(a) {
			return map[a];
		});		
	};
}();
var hmac = function(str, secret) {
	var hash = crypto.createHmac('sha1', secret);
	
	hash.update(str);
	
	return hash.digest('base64');
};

var sign = function(secret, str, options) {
	options = options || {};
	
	var now = options.ttl ? ((Date.now()/1000)|0)+options.ttl : 0;
		
	return esc(new Buffer(''+now).toString('base64')+'!'+hmac(now+','+str, secret));
};
var verify = function(secret, str, sig) {
	sig = unesc(sig).split('!');
	
	if (sig.length !== 2) {
		return false;
	}

	var exp = parseInt(new Buffer(sig[0], 'base64').toString('ascii'),10);
	
	sig = sig[1];

	if (hmac(exp+','+str, secret) !== sig) {
		return false;
	}
		
	return !exp || 1000*exp >= Date.now();
};

var Signer = function(secret) {
	this.secret = secret;
};

Signer.prototype.sign = function(str, options) {
	return sign(this.secret, str, options);
};
Signer.prototype.verify = function(str, sig) {
	return verify(this.secret, str, sig);
};

try {
	exports.secret = require('fs').readFileSync(__dirname+'/shared.key');
} catch (err) {}

exports.generateKey = function(callback) {
	var result = new Buffer(20);

	common.step([
		function(next) {
			fs.open('/dev/random', 'r', 0666, next);				
		},
		function(fd, next) {
			this.fd = fd;
			fs.read(fd, result, 0, 20, null, next);
		},
		function(read, next) {
			fs.close(this.fd, next);
		},
		function() {
			callback(null, result);
		}
	], callback)	
}
exports.sign = function(str, options) {
	return sign(exports.secret, str, options);
};
exports.verify = function(str, sig) {
	return verify(exports.secret, str, sig);
};
exports.create = function(secret) {
	return new Signer(secret);
};
